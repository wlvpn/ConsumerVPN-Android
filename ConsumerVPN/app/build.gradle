apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply from: "../config/quality.gradle"

apply plugin: 'maven-publish'

android {
    namespace "com.wlvpn.consumervpn"

    compileSdkVersion 34
    defaultConfig {
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
        applicationId "com.wlvpn.consumervpn"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        buildConfigField 'String', 'CLIENT', "\"Android-${versionName}b${versionCode}\""

        // Store Values
        buildConfigField 'String', 'GOOGLE_PLAY_STORE_URL', '"http://play.google.com/store/apps/details?id="'
        buildConfigField 'String', 'AMAZON_STORE_URL', '"amzn://apps/android?p="'

        buildConfigField 'String', 'FLAGS_HOSTNAME', '"https://static.wlvpn.com/flags/"'

        buildConfigField 'String', 'IKE_REMOTE_ID', '"vpn.wlvpn.com"'
    }

    // These keys are intended for tests environments only, the release keys should not live in the gradle file
    signingConfigs {

        debug {
            storeFile rootProject.file("config/keystores/debug-consumer.jks")
            keyAlias "consumervpn-v2"
            keyPassword '5MLdn3mB7pCFJ7'
            storePassword '5MLdn3mB7pCFJ7'
        }

        staging {
            storeFile rootProject.file("config/keystores/staging-consumer.jks")
            keyAlias "consumervpn-v2"
            keyPassword "hy4f8dhETrnjME"
            storePassword "hy4f8dhETrnjME"
        }
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            versionNameSuffix '-debug'
            applicationIdSuffix '.debug'
        }

        // Environment only for tests.
        // You may want to add a beta build type for a pre-release build
        staging {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.staging
            versionNameSuffix '-staging'
            applicationIdSuffix '.staging'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            //This has to be updated with the partner's release certificate.
            //Releasing it with this certificate will create an insecure package
            signingConfig signingConfigs.staging
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    flavorDimensions "platform"
    productFlavors {
        mobile {
            dimension "platform"
        }
        tv {
            dimension "platform"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    lintOptions {
        ignore 'InvalidPackage'
    }

}

dependencies {

    def versions = [
            os           : [
                    cardview        : "1.0.0",
                    gridLayout      : "1.0.0",
                    leanback        : "1.1.0-rc01",
                    lifecycle       : "2.4.1",
                    lifecycleViewModel: "2.4.1",
                    constraintLayout: "2.1.4",
                    material        : "1.7.0",
                    appCompat       : "1.5.0",
                    preferences     : "1.1.1",
                    workManager     : "2.7.1",
                    desugar         : "1.1.5",
                    recyclerview    : "1.2.1",
                    annotation      : "1.3.0",
                    browser         : "1.5.0",
                    gridlayout      : "1.0.0"
            ],
            rxJava       : "2.2.19",
            rxAndroid    : "2.1.1",
            rxKotlin     : "2.4.0",
            rxBinding    : "3.1.0",
            gson         : "2.8.5",
            dagger       : "2.47",
            retrofit     : "2.5.0",
            leakCanary   : "2.9.1",
            fresco       : "1.13.0",
            vpnSdk       : "1.6.4.210792",
            timber       : "4.7.1",
            autoValue    : "1.6.5",
            loganSquare  : "1.3.7",
            slf4j        : "1.7.25",
            logback      : "2.0.0",
            licenses     : "1.0.80577",
            nativencrkeyption :"1.1.0140581-SNAPSHOT",
            test         : [
                    junit  : "4.12",
                    mockito: "2.24.0"
            ]
    ]

    //region OS
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.os.lifecycleViewModel"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.os.lifecycle"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.os.lifecycle"
    implementation "androidx.constraintlayout:constraintlayout:$versions.os.constraintLayout"
    implementation "androidx.appcompat:appcompat:$versions.os.appCompat"
    implementation "androidx.annotation:annotation:$versions.os.annotation"
    implementation "androidx.browser:browser:$versions.os.browser"
    implementation "androidx.recyclerview:recyclerview:$versions.os.recyclerview"
    implementation "androidx.cardview:cardview:$versions.os.cardview"
    implementation "androidx.leanback:leanback:$versions.os.leanback"
    implementation "androidx.leanback:leanback-preference:$versions.os.leanback"
    implementation "androidx.cardview:cardview:$versions.os.cardview"
    implementation "androidx.gridlayout:gridlayout:$versions.os.gridLayout"
    implementation "com.google.android.material:material:$versions.os.material"
    implementation "androidx.preference:preference:$versions.os.preferences"
    implementation "androidx.preference:preference-ktx:$versions.os.preferences"
    implementation "androidx.work:work-runtime-ktx:$versions.os.workManager"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.os.desugar"
    //endregion OS

    // region Libs

    // Logs
    implementation "org.slf4j:slf4j-api:$versions.slf4j"
    implementation "com.github.tony19:logback-android:$versions.logback"

    // Rx Bindings
    implementation "com.jakewharton.rxbinding3:rxbinding:$versions.rxBinding"
    implementation "com.jakewharton.rxbinding3:rxbinding-material:$versions.rxBinding"
    implementation "com.jakewharton.rxbinding3:rxbinding-appcompat:$versions.rxBinding"

    // Gson
    implementation "com.google.code.gson:gson:$versions.gson"

    // Timber
    implementation "com.jakewharton.timber:timber:$versions.timber"

    // VPN Sdk
    implementation("com.gentlebreeze.vpn.sdk:sdk:$versions.vpnSdk") {
        transitive = true
    }

    //Internal libraries
    implementation "com.netprotect.licenses:app:$versions.licenses"
    implementation "com.netprotect.nativencrkeyption:nativencrkeyption:${versions.nativencrkeyption}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"

    // RxKotlin
    implementation "io.reactivex.rxjava2:rxkotlin:$versions.rxKotlin"

    // Dagger2
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"

    //Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"
    stagingImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"

    //Fresco
    implementation "com.facebook.fresco:fresco:$versions.fresco"

    //Annotation processing
    kapt "com.bluelinelabs:logansquare-compiler:$versions.loganSquare"
    kapt "com.google.auto.value:auto-value:$versions.autoValue"

    //endregion Libs

    //region Test libs
    testImplementation "org.mockito:mockito-core:$versions.test.mockito"
    testImplementation "junit:junit:$versions.test.junit"
    //endregion Test libs

}